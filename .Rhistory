text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
reticulate::import("sys", convert = TRUE)
sys$path
sys = reticulate::import("sys", convert = TRUE)
sys$path
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
sys$path
py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
#py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
py_config()
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
library(classecol)
library(reticulate)
load_classecol(link_py = T)
sys = reticulate::import("sys", convert = TRUE)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
load_classeco = function(
download_models = F,
download_modules = F,
link_py = T){
message("classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
direc = paste(find.package("classecol"),"/models", sep = "")
if(download_models == T){
message("Model download beginning...")
download_models(direc)
} else {
message("Skipping model download")
}
direc = paste(direc, "/classecol-models-master/", sep = "")
if(download_modules == T){
message("Python modules downloading...")
addeR::install_modules(c("keras", "tensorflow", "pandas", "nltk", "bs4", "sklearn", "scikit-learn==0.19.1"))
} else {
message("Skipping python module download")
}
if(link_py == T){
message("Linking python to R...")
addeR::link_python()
sys = reticulate::import("sys", convert = TRUE)
} else {
}
message("Again, classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
return(sys)
}
library(classecol)
library(reticulate)
load_classeco(link_py = T)
#sys = reticulate::import("sys", convert = TRUE)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
devtools::document()
load_classecol()
load_classecol
library(devtools)
install_github("GitTFJ/classecol")
library(classecol)
load_classecol
devtools::document()
library(classecol)
library(reticulate)
load_classecol(link_py = T)
#sys = reticulate::import("sys", convert = TRUE)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(devtools)
install_github("GitTFJ/classecol")
library(classecol)
py_config()
reticulate::py_config()
devtools::document()
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
load_classecol = function(
download_models = F,
download_modules = F,
link_py = T){
message("classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
direc = paste(find.package("classecol"),"/models", sep = "")
if(download_models == T){
message("Model download beginning...")
download_models(direc)
} else {
message("Skipping model download")
}
direc = paste(direc, "/classecol-models-master/", sep = "")
if(download_modules == T){
message("Python modules downloading...")
addeR::install_modules(c("keras", "tensorflow", "pandas", "nltk", "bs4", "sklearn", "scikit-learn==0.19.1"))
} else {
message("Skipping python module download")
}
if(link_py == T){
message("Linking python to R...")
addeR::link_python()
sys = reticulate::import("sys", convert = TRUE)
} else {
sys = NULL
}
message("Again, classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
return(sys)
}
load_classeco = function(
download_models = F,
download_modules = F,
link_py = T){
message("classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
direc = paste(find.package("classecol"),"/models", sep = "")
if(download_models == T){
message("Model download beginning...")
download_models(direc)
} else {
message("Skipping model download")
}
direc = paste(direc, "/classecol-models-master/", sep = "")
if(download_modules == T){
message("Python modules downloading...")
addeR::install_modules(c("keras", "tensorflow", "pandas", "nltk", "bs4", "sklearn", "scikit-learn==0.19.1"))
} else {
message("Skipping python module download")
}
if(link_py == T){
message("Linking python to R...")
addeR::link_python()
sys = reticulate::import("sys", convert = TRUE)
} else {
sys = NULL
}
message("Again, classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
return(sys)
}
library(classecol)
library(reticulate)
load_classeco(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
devtools::document()
load_classecol
library(classecol)
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
library(sentimentr)
library(tidyverse)
text <- "This tutorial is awesome. The creator is not boring"
sentiment()
sentiment_by()
sentiment(text)
sentiment_by(text, by = NULL)
profanity(text)
debates <- presidential_debates_2012
sentiment("this")
sentiment("tutorial")
sentiment("is")
sentiment("awesome")
sentiment(" not awesome")
text <- "This tutorial is not awesome"
sentiment(text)
text <- "This tutorial is awesome"
sentiment(text)
sentimentr::sentiment("This tutorial is awesome")
text_vector <- "This tutorial is awesome"
sentiword = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_sentiword, question.weight = 0)[["sentiment"]], 2)
round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_sentiword, question.weight = 0)[["sentiment"]], 2)
round(sentimentr::sentiment(text_vector)[["sentiment"]], 2)
round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_socal_google, question.weight = 0)[["sentiment"]], 2)
senti_matrix = function(text_vector){
mat = data.frame(
jockers_rinker = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_jockers_rinker,  question.weight = 0)[["sentiment"]], 2),
jockers = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_jockers, question.weight = 0)[["sentiment"]], 2),
huliu = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_huliu, question.weight = 0)[["sentiment"]], 2),
loughran_mcdonald = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_loughran_mcdonald, question.weight = 0)[["sentiment"]], 2),
senticnet = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_senticnet, question.weight = 0)[["sentiment"]], 2),
sentiword = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_sentiword, question.weight = 0)[["sentiment"]], 2),
sentimentr = round(sentimentr::sentiment(text_vector)[["sentiment"]], 2),
socal_google = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_socal_google, question.weight = 0)[["sentiment"]], 2),
nrc = syuzhet::get_sentiment(text_vector, method="nrc"),
afinn = syuzhet::get_sentiment(text_vector, method="afinn"),
bing = syuzhet::get_sentiment(text_vector, method="bing"),
meanr = meanr::score(text_vector)[['score']]
)
return(mat)
}
senti_matrix(text_vector = "This cat is the best. But also the worst")
senti_matrix(text_vector = "This cat is not good. But also the worst")
devtools::document()
devtools::document()
?sentimentr::sentiment
devtools::document()
txt = c("cats l l l lllll", "dog", "si", " ", "")
nchar(txt)
sum(nchar(txt) < 5)
devtools::document()
devtools::document()
library(devtools)
install_github("GitTFJ/classecol")
# Set working directory to 'Code' directory ----
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets/Manuscript/Code")
# Load packages ----
library(reshape)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(ggridges)
library(merTools)
library(readxl)
library(irr)
library(ggpubr)
library(grid)
library(gtable)
library(boot)
library(lexicon)
library(qdap)
library(stringr)
library(classecol)
library(textstem)
library(cld2)
library(lexicon)
library(stringr)
library(cld2)
library(textstem)
library(sentimentr)
library(coreNLPsetup)
library(stansent)
library(SentimentAnalysis)
library(meanr)
library(syuzhet)
library(qdap)
library(RSentiment)
library(corrplot)
library(tm)
library(ggwordcloud)
library(ggpubr)
# Set working directory to 'Code' directory ----
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets/Manuscript/Code")
# Load packages ----
library(reshape)
library(plyr)
library(dplyr)
library(ggplot2)
library(lme4)
library(ggridges)
library(merTools)
library(readxl)
library(irr)
library(ggpubr)
library(grid)
library(gtable)
library(boot)
library(lexicon)
library(qdap)
library(stringr)
library(classecol)
library(textstem)
library(cld2)
library(lexicon)
library(stringr)
library(cld2)
library(textstem)
library(sentimentr)
library(coreNLPsetup)
library(stansent)
library(SentimentAnalysis)
library(meanr)
library(syuzhet)
library(qdap)
library(RSentiment)
library(corrplot)
library(tm)
library(ggwordcloud)
library(ggpubr)
tmp = read.csv("../Data/hunt_all(adjust).csv")
tmp2 = tmp[,c(10,16:26)]
tmp2 = melt(tmp2, id = "tags_reclass3")
tmp2 = subset(tmp2, tags_reclass3 != "Irrelevant")
tmp2$tags_reclass3 = as.character(tmp2$tags_reclass3)
tmp2$tags_reclass3 = ifelse(tmp2$tags_reclass3 == "Relevant (pro-hunt_fish)", "Relevant (pro-hunting)", tmp2$tags_reclass3)
tmp_sum = tmp2 %>%
group_by(tags_reclass3, variable) %>%
dplyr::summarise(
lq = quantile(scale(value), probs = c(0.05)),
med = quantile(scale(value), probs = c(0.5)),
uq = quantile(scale(value), probs = c(0.95))
)
levels(tmp_sum$variable) <- c("Jockers Rinker","Jockers","Hu Liu", "Loughran McDonald", "SenticNet", "SentiWords", "SO-CAL Google", "NRC", "AFINN", "Bing", "meanr")
tmp_sum$tags_reclass3 = as.factor(tmp_sum$tags_reclass3)
levels(tmp_sum$tags_reclass3) = c("Against-hunting", "Pro-hunting")
tmp = read.csv("../Data/nat_all(adjust).csv")
tmp2 = tmp[,c(10,16:26)]
tmp2 = melt(tmp2, id = "tags_reclass3")
tmp2$tags_reclass3 = gsub("wildlife", "nature", tmp2$tags_reclass3)
tmp2 = subset(tmp2, tags_reclass3 != "Irrelevant" & tags_reclass3 != "Against-nature")
tmp2$tags_reclass3 = as.character(tmp2$tags_reclass3)
tmp_sum2 = tmp2 %>%
group_by(tags_reclass3, variable) %>%
dplyr::summarise(
lq = quantile(scale(value), probs = c(0.05)),
med = quantile(scale(value), probs = c(0.5)),
uq = quantile(scale(value), probs = c(0.95))
)
levels(tmp_sum2$variable) <- c("Jockers Rinker","Jockers","Hu Liu", "Loughran McDonald", "SenticNet", "SentiWords", "SO-CAL Google", "NRC", "AFINN", "Bing", "meanr")
a = ggplot(data = tmp_sum) +
geom_pointrange(aes(y = variable, xmin = lq, x = med, xmax = uq, colour = tags_reclass3), position = position_dodge(width = 0.5)) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Standardised sentiment score", y = " ") +
theme_classic() +
theme(
legend.position = "top",
legend.title = element_blank()
)
b = ggplot(data = tmp_sum2) +
geom_pointrange(aes(y = variable, xmin = lq, x = med, xmax = uq, colour = tags_reclass3), position = position_dodge(width = 0.5)) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Standardised sentiment score", y = " ") +
theme_classic() +
theme(
legend.position = "top",
legend.title = element_blank()
)
arang = ggarrange(a, b, ncol = 2)
ggsave("../MainText/class_vs_sent.png", width = 10, height = 4.5)
ggsave("../MainText/class_vs_sent.png", width = 9, height = 4)
b = ggplot(data = tmp_sum2) +
geom_pointrange(aes(y = variable, xmin = lq, x = med, xmax = uq, colour = tags_reclass3), position = position_dodge(width = 0.5)) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Standardised sentiment score", y = " ") +
theme_classic() +
theme(
legend.position = "top",
legend.title = element_blank(),
text = element_text(size=20)
)
arang = ggarrange(a, b, ncol = 2)
arang
b = ggplot(data = tmp_sum2) +
geom_pointrange(aes(y = variable, xmin = lq, x = med, xmax = uq, colour = tags_reclass3), position = position_dodge(width = 0.5)) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Standardised sentiment score", y = " ") +
theme_classic() +
theme(
legend.position = "top",
legend.title = element_blank(),
text = element_text(size=12)
)
arang = ggarrange(a, b, ncol = 2)
arang
b = ggplot(data = tmp_sum2) +
geom_pointrange(aes(y = variable, xmin = lq, x = med, xmax = uq, colour = tags_reclass3), position = position_dodge(width = 0.5)) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Standardised sentiment score", y = " ") +
theme_classic() +
theme(
legend.position = "top",
legend.title = element_blank(),
text = element_text(size=13)
)
arang = ggarrange(a, b, ncol = 2)
a = ggplot(data = tmp_sum) +
geom_pointrange(aes(y = variable, xmin = lq, x = med, xmax = uq, colour = tags_reclass3), position = position_dodge(width = 0.5)) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Standardised sentiment score", y = " ") +
theme_classic() +
theme(
legend.position = "top",
legend.title = element_blank(),
text = element_text(size=13)
)
arang = ggarrange(a, b, ncol = 2)
ggsave("../MainText/class_vs_sent.png", width = 10.5, height = 4)
ggsave("../MainText/class_vs_sent.png", width = 10.5, height = 4)
ggsave("../MainText/class_vs_sent.png", width = 11.5, height = 5)
tmp_sum2$tags_reclass3
tmp_sum2$tags_reclass3 = ifelse(
tmp_sum2$tags_reclass3 == "Pro-nature (positive phrasing)",
"Pro-nature (+)",
"Pro-nature (-)")
b = ggplot(data = tmp_sum2) +
geom_pointrange(aes(y = variable, xmin = lq, x = med, xmax = uq, colour = tags_reclass3), position = position_dodge(width = 0.5)) +
scale_color_manual(values = c("black", "grey")) +
labs(x = "Standardised sentiment score", y = " ") +
theme_classic() +
theme(
legend.position = "top",
legend.title = element_blank(),
text = element_text(size=13)
)
arang = ggarrange(a, b, ncol = 2)
arang
ggsave("../MainText/MEE2/class_vs_sent.png", width = 11.5, height = 5)
ggsave("../MainText/MEE2/class_vs_sent.png", width = 10.5, height = 5)
devtools::document()
