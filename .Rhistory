data = data.frame(text = text_vector)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data)
model_directory = r_to_py(directory)
if(is.character(text_vector)){
if(type == "full"){
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
} else {
stop("Data format should be a vector in character format")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
#dir.create("Models")
#download_models("Models")
bio_class(
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"),
type = "full",
directory = "Manuscript/Models")
#dir.create("Models")
#download_models("Models")
bio_class(
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"),
type = "full",
directory = "Manuscript/Models")
bio_class = function(text_vector,
type = "full",
directory){
print(1)
save_dic = getwd()
print(2)
directory = paste(getwd(),"/", directory, "/classecol-models-master/", sep = "")
print(3)
data = data.frame(text = text_vector)
print(4)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
print(5)
data = r_to_py(data)
print(6)
model_directory = r_to_py(directory)
print(7)
if(is.character(text_vector)){
print(8)
if(type == "full"){
print(9)
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
print(10)
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
} else {
stop("Data format should be a vector in character format")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
#dir.create("Models")
#download_models("Models")
bio_class(
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"),
type = "full",
directory = "Manuscript/Models")
getwd()
directory = "Manuscript/Models"
paste(directory,"bio_all_rapid_pred.py", sep = "")
type = "full"
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading")
print(1)
save_dic = getwd()
print(2)
directory = paste(getwd(),"/", directory, "/classecol-models-master/", sep = "")
directory
print(3)
data = data.frame(text = text_vector)
print(4)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
print(5)
data = r_to_py(data)
print(6)
model_directory = r_to_py(directory)
print(7)
(is.character(text_vector))
print(8)
(type == "full")
print(9)
paste(directory,"bio_all_rapid_pred.py", sep = "")
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
repl_python()
r.data
r.model_directory
exit
getwd()
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading")
type = "full"
directory = "Manuscript/Models"
print(1)
save_dic = getwd()
print(2)
model_directory = paste(getwd(),"/", directory, "/classecol-models-master/", sep = "")
directory = paste(getwd(),"/", directory, "/classecol-models-master/", sep = "")
print(3)
data = data.frame(text = text_vector)
print(4)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
print(5)
data = r_to_py(data)
print(6)
model_directory = r_to_py(model_directory)
repl_python()
r.data
r.model_directory
print(7)
print(8)
print(9)
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
paste(directory,"bio_all_rapid_pred.py", sep = "")
paste(directory,"bio_all_rapid_pred.py", sep = "")
exit
paste(directory,"bio_all_rapid_pred.py", sep = "")
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
bio_class = function(text_vector,
type = "full",
directory){
print(1)
save_dic = getwd()
print(2)
model_directory = paste(getwd(),"/", directory, "/classecol-models-master/", sep = "")
directory = paste(getwd(),"/", directory, "/classecol-models-master/", sep = "")
print(3)
data = data.frame(text = text_vector)
print(4)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
print(5)
data = r_to_py(data)
print(6)
model_directory = r_to_py(model_directory)
print(7)
if(is.character(text_vector)){
print(8)
if(type == "full"){
print(9)
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
print(10)
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
} else {
stop("Data format should be a vector in character format")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
#dir.create("Models")
#download_models("Models")
bio_class(
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"),
type = "full",
directory = "Manuscript/Models")
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = "")
bio_class = function(text_vector,
type = "full",
directory){
print(1)
save_dic = getwd()
print(2)
print(3)
data = data.frame(text = text_vector)
print(4)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
print(5)
data = r_to_py(data)
print(6)
directory = model_directory
model_directory = r_to_py(model_directory)
print(7)
if(is.character(text_vector)){
print(8)
if(type == "full"){
print(9)
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
print(10)
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
} else {
stop("Data format should be a vector in character format")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
#dir.create("Models")
#download_models("Models")
bio_class(
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"),
type = "full",
model_directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
bio_class = function(text_vector,
type = "full",
model_directory){
print(1)
save_dic = getwd()
print(2)
print(3)
data = data.frame(text = text_vector)
print(4)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
print(5)
data = r_to_py(data)
print(6)
directory = model_directory
model_directory = r_to_py(model_directory)
print(7)
if(is.character(text_vector)){
print(8)
if(type == "full"){
print(9)
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
print(10)
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
} else {
stop("Data format should be a vector in character format")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
#dir.create("Models")
#download_models("Models")
bio_class(
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"),
type = "full",
model_directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading")
type = "full"
model_directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = "")
print(1)
save_dic = getwd()
print(2)
print(3)
data = data.frame(text = text_vector)
print(4)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
print(5)
data = r_to_py(data)
print(6)
directory = model_directory
model_directory = r_to_py(model_directory)
print(7)
model_directory = r_to_py(directory)
print(7)
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
library(reticulate)
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading")
type = "full"
directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = "")
save_dic = getwd()
data = data.frame(text = text_vector)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data)
model_directory = r_to_py(directory)
repl_python()
r.model_directory
bio_class = function(text_vector,
type = "full",
directory){
save_dic = getwd()
data = data.frame(text = text_vector)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data)
model_directory = r_to_py(directory)
if(is.character(text_vector)){
print(8)
if(type == "full"){
print(9)
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
print(10)
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
} else {
stop("Data format should be a vector in character format")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
exit
bio_class = function(text_vector,
type = "full",
directory){
save_dic = getwd()
data = data.frame(text = text_vector)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data)
model_directory = r_to_py(directory)
if(is.character(text_vector)){
print(8)
if(type == "full"){
print(9)
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
print(10)
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
} else {
stop("Data format should be a vector in character format")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
#dir.create("Models")
#download_models("Models")
bio_class(
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"),
type = "full",
directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
repl_python()
r.data
exit
bio_class = function(text_vector,
type = "full",
directory){
save_dic = getwd()
data = data.frame(text = text_vector)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data)
model_directory = r_to_py(directory)
repl_python()
print(r.model_directory)
exit
}
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
#dir.create("Models")
#download_models("Models")
bio_class(
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"),
type = "full",
directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
exit
bio_class = function(text_vector,
type = "full",
directory){
save_dic = getwd()
data = data.frame(text = text_vector)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data)
model_directory = r_to_py(directory)
}
bio_class = function(text_vector,
type = "full",
directory){
save_dic = getwd()
data = data.frame(text = text_vector)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data)
model_directory = r_to_py(directory)
return(py$r.model_directory)
}
#dir.create("Models")
#download_models("Models")
bio_class(
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"),
type = "full",
directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
use_python("C:/Users/mn826766/Anaconda3/python.exe")
use_python("C:/Users/mn826766/Anaconda3/python.exe")
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
model_directory = r_to_py(paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
repl_python()
r.model_directory
exit
model_directory = r_to_py(paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
repl_python()
r.model_directory
exit
use_python("C:/Users/mn826766/Anaconda3/python.exe")
bio_class = function(text_vector,
type = "full",
model_directory,
directory,
){
save_dic = getwd()
if(is.character(text_vector)){
print(8)
if(type == "full"){
print(9)
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
print(10)
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
} else {
stop("Data format should be a vector in character format")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
bio_class = function(data,
type = "full",
model_directory,
directory,
){
save_dic = getwd()
if(is.character(text_vector)){
if(type == "full"){
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
} else {
stop("Data format should be a vector in character format")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
bio_class = function(data,
type = "full",
model_directory,
directory){
save_dic = getwd()
if(type == "full"){
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
bio_class(
data = r_to_py(data.frame(text = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"))),
type = "full",
model_directory = r_to_py(paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = "")),
directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
bio_class = function(type = "full",
directory){
save_dic = getwd()
if(type == "full"){
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data.frame(text = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading")))
model_directory = r_to_py(paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = "")
bio_class(
type = "full",
directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
?dir
