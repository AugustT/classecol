"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
df = data.frame(text = c("cat", "dog"))
df1 = r_to_py(df)
repl_python()
r.df
r.df1
exit
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(reticulate)
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
library(reticulate)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I love walking in nature - so serene",
"Why are the government not stopping the destruction of the rainforest?!",
"Tiger wins the PGA tour again!"),
stringsAsFactors = F)
df$text = classecol::clean(df$text, level = "full")
sm = as.matrix(cbind(
valence(df$text),
lang_eng(df$text),
senti_matrix(df$text)))
nat_class(
text_vector = df$text,
senti = sm,
type = "trimmed")
df = data.frame(
name = c(
"Jane Doe ",
"Thomas Frederick Johnson",
"Fictional University"),
description = c(
"Business leader, banker, parent, and cyclist",
"Ecology and conservation researcher",
"Campus life and study at the Fictional University. Follow for news and updates"),
stringsAsFactors = F)
bio_class(
text_vector = paste(df$name, df$description),
type = "full")
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
library(reticulate)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(reticulate)
df = data.frame(
text = c(
"I love walking in nature - so serene",
"Why are the government not stopping the destruction of the rainforest?!",
"Tiger wins the PGA tour again!"),
stringsAsFactors = F)
df$text = classecol::clean(df$text, level = "full")
sm = as.matrix(cbind(
valence(df$text),
lang_eng(df$text),
senti_matrix(df$text)))
nat_class(
text_vector = df$text,
senti = sm,
type = "trimmed")
df = data.frame(
name = c(
"Jane Doe ",
"Thomas Frederick Johnson",
"Fictional University"),
description = c(
"Business leader, banker, parent, and cyclist",
"Ecology and conservation researcher",
"Campus life and study at the Fictional University. Follow for news and updates"),
stringsAsFactors = F)
bio_class(
text_vector = paste(df$name, df$description),
type = "full")
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
library(reticulate)
library(devtools)
install_github("GitTFJ/classecol")
library(classecol)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
text = "BTW tomorrow will be the best #TrophyHunting :)"
text
clean(text, level = "simple")
devtools::document()
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(reticulate)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
hun_class = function(text_vector, type = "full"){
if(is.vector(text_vector)){
tmp_df = data.frame(text = text_vector)
dat = reticulate::r_to_py(tmp_df)
list2env(list(data = dat), envir = .GlobalEnv)
directory = paste(find.package("classecol"),"/models/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(directory)
assign("model_directory", model_directory, envir = .GlobalEnv)
save_dic = getwd()
if(type == "full"){
reticulate::py_run_file(paste(directory,"hunt_all_rapid_pred.py", sep = ""))
} else if (type == "relevance"){
reticulate::py_run_file(paste(directory,"hunt_relevance_rapid_pred.py", sep = ""))
} else if (type == "stance"){
reticulate::py_run_file(paste(directory,"hunt_stance_rapid_h_pred.py", sep = ""))
} else {
stop("Please specify a valid type")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
} else {
stop("'text_vector' must be a vector")
}
}
devtools::document()
hun_class
devtools::document()
library(reticulate)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(reticulate)
library(classecol)
library(reticulate)
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
sys <- import("sys", convert = TRUE)
sys$path
library(reticulate)
sys <- import("sys", convert = TRUE)
sys$path
library(classecol)
library(devtools)
install_github("GitTFJ/classecol")
library(classecol)
library(reticulate)
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
sys <- import("sys", convert = TRUE)
sys$path
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
devtools::document()
sys <- reticulate::import("sys", convert = TRUE)
library(reticulate)
sys <- import("sys", convert = TRUE)
sys$path
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
sys <- import("sys", convert = TRUE)
sys$path
library(classecol)
library(reticulate)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
sys <- import("sys", convert = TRUE)
sys$path
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
sys <- import("sys", convert = TRUE)
library(reticulate)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
sys <- import("sys", convert = TRUE)
sys$path
#hun_class(
#  text_vector = classecol::clean(df$text, level = "simple"),
#  type = "full")
library(reticulate)
sys <- import("sys", convert = TRUE)
sys$path
library(reticulate)
sys <- import("sys", convert = TRUE)
sys$path
library(reticulate)
sys <- import("sys", convert = TRUE)
print(sys$path)
library(classecol)
library(reticulate)
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
sys <- import("sys", convert = TRUE)
sys$path
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
devtools::document()
library(classecol)
library(reticulate)
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
reticulate::import("sys", convert = TRUE)
sys$path
sys = reticulate::import("sys", convert = TRUE)
sys$path
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
sys$path
py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
#py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
py_config()
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
library(classecol)
library(reticulate)
load_classecol(link_py = T)
sys = reticulate::import("sys", convert = TRUE)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
load_classeco = function(
download_models = F,
download_modules = F,
link_py = T){
message("classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
direc = paste(find.package("classecol"),"/models", sep = "")
if(download_models == T){
message("Model download beginning...")
download_models(direc)
} else {
message("Skipping model download")
}
direc = paste(direc, "/classecol-models-master/", sep = "")
if(download_modules == T){
message("Python modules downloading...")
addeR::install_modules(c("keras", "tensorflow", "pandas", "nltk", "bs4", "sklearn", "scikit-learn==0.19.1"))
} else {
message("Skipping python module download")
}
if(link_py == T){
message("Linking python to R...")
addeR::link_python()
sys = reticulate::import("sys", convert = TRUE)
} else {
}
message("Again, classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
return(sys)
}
library(classecol)
library(reticulate)
load_classeco(link_py = T)
#sys = reticulate::import("sys", convert = TRUE)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
devtools::document()
load_classecol()
load_classecol
library(devtools)
install_github("GitTFJ/classecol")
library(classecol)
load_classecol
devtools::document()
library(classecol)
library(reticulate)
load_classecol(link_py = T)
#sys = reticulate::import("sys", convert = TRUE)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
