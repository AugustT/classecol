library(reticulate)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
hun_class = function(text_vector, type = "full"){
if(is.vector(text_vector)){
tmp_df = data.frame(text = text_vector)
dat = reticulate::r_to_py(tmp_df)
list2env(list(data = dat), envir = .GlobalEnv)
directory = paste(find.package("classecol"),"/models/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(directory)
assign("model_directory", model_directory, envir = .GlobalEnv)
save_dic = getwd()
if(type == "full"){
reticulate::py_run_file(paste(directory,"hunt_all_rapid_pred.py", sep = ""))
} else if (type == "relevance"){
reticulate::py_run_file(paste(directory,"hunt_relevance_rapid_pred.py", sep = ""))
} else if (type == "stance"){
reticulate::py_run_file(paste(directory,"hunt_stance_rapid_h_pred.py", sep = ""))
} else {
stop("Please specify a valid type")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
} else {
stop("'text_vector' must be a vector")
}
}
devtools::document()
hun_class
devtools::document()
library(reticulate)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(reticulate)
library(classecol)
library(reticulate)
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
sys <- import("sys", convert = TRUE)
sys$path
library(reticulate)
sys <- import("sys", convert = TRUE)
sys$path
library(classecol)
library(devtools)
install_github("GitTFJ/classecol")
library(classecol)
library(reticulate)
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
sys <- import("sys", convert = TRUE)
sys$path
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
devtools::document()
sys <- reticulate::import("sys", convert = TRUE)
library(reticulate)
sys <- import("sys", convert = TRUE)
sys$path
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
sys <- import("sys", convert = TRUE)
sys$path
library(classecol)
library(reticulate)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
sys <- import("sys", convert = TRUE)
sys$path
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
sys <- import("sys", convert = TRUE)
library(reticulate)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
sys <- import("sys", convert = TRUE)
sys$path
#hun_class(
#  text_vector = classecol::clean(df$text, level = "simple"),
#  type = "full")
library(reticulate)
sys <- import("sys", convert = TRUE)
sys$path
library(reticulate)
sys <- import("sys", convert = TRUE)
sys$path
library(reticulate)
sys <- import("sys", convert = TRUE)
print(sys$path)
library(classecol)
library(reticulate)
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
sys <- import("sys", convert = TRUE)
sys$path
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
devtools::document()
library(classecol)
library(reticulate)
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
reticulate::import("sys", convert = TRUE)
sys$path
sys = reticulate::import("sys", convert = TRUE)
sys$path
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
sys$path
py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
#py_config()
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
#sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
py_config()
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(classecol)
library(reticulate)
sys = reticulate::import("sys", convert = TRUE)
load_classecol(link_py = T)
library(classecol)
library(reticulate)
load_classecol(link_py = T)
sys = reticulate::import("sys", convert = TRUE)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
load_classeco = function(
download_models = F,
download_modules = F,
link_py = T){
message("classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
direc = paste(find.package("classecol"),"/models", sep = "")
if(download_models == T){
message("Model download beginning...")
download_models(direc)
} else {
message("Skipping model download")
}
direc = paste(direc, "/classecol-models-master/", sep = "")
if(download_modules == T){
message("Python modules downloading...")
addeR::install_modules(c("keras", "tensorflow", "pandas", "nltk", "bs4", "sklearn", "scikit-learn==0.19.1"))
} else {
message("Skipping python module download")
}
if(link_py == T){
message("Linking python to R...")
addeR::link_python()
sys = reticulate::import("sys", convert = TRUE)
} else {
}
message("Again, classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
return(sys)
}
library(classecol)
library(reticulate)
load_classeco(link_py = T)
#sys = reticulate::import("sys", convert = TRUE)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
devtools::document()
load_classecol()
load_classecol
library(devtools)
install_github("GitTFJ/classecol")
library(classecol)
load_classecol
devtools::document()
library(classecol)
library(reticulate)
load_classecol(link_py = T)
#sys = reticulate::import("sys", convert = TRUE)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
library(devtools)
install_github("GitTFJ/classecol")
library(classecol)
py_config()
reticulate::py_config()
devtools::document()
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
load_classecol = function(
download_models = F,
download_modules = F,
link_py = T){
message("classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
direc = paste(find.package("classecol"),"/models", sep = "")
if(download_models == T){
message("Model download beginning...")
download_models(direc)
} else {
message("Skipping model download")
}
direc = paste(direc, "/classecol-models-master/", sep = "")
if(download_modules == T){
message("Python modules downloading...")
addeR::install_modules(c("keras", "tensorflow", "pandas", "nltk", "bs4", "sklearn", "scikit-learn==0.19.1"))
} else {
message("Skipping python module download")
}
if(link_py == T){
message("Linking python to R...")
addeR::link_python()
sys = reticulate::import("sys", convert = TRUE)
} else {
sys = NULL
}
message("Again, classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
return(sys)
}
load_classeco = function(
download_models = F,
download_modules = F,
link_py = T){
message("classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
direc = paste(find.package("classecol"),"/models", sep = "")
if(download_models == T){
message("Model download beginning...")
download_models(direc)
} else {
message("Skipping model download")
}
direc = paste(direc, "/classecol-models-master/", sep = "")
if(download_modules == T){
message("Python modules downloading...")
addeR::install_modules(c("keras", "tensorflow", "pandas", "nltk", "bs4", "sklearn", "scikit-learn==0.19.1"))
} else {
message("Skipping python module download")
}
if(link_py == T){
message("Linking python to R...")
addeR::link_python()
sys = reticulate::import("sys", convert = TRUE)
} else {
sys = NULL
}
message("Again, classecol is reliant on Java 8 or above. Install Java from: https://www.java.com/en/download/")
return(sys)
}
library(classecol)
library(reticulate)
load_classeco(link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
devtools::document()
load_classecol
library(classecol)
#On the first run, set download_models = T and download_modules = T
load_classecol(download_models = F, download_modules = F, link_py = T)
library(sentimentr)
library(tidyverse)
text <- "This tutorial is awesome. The creator is not boring"
sentiment()
sentiment_by()
sentiment(text)
sentiment_by(text, by = NULL)
profanity(text)
debates <- presidential_debates_2012
sentiment("this")
sentiment("tutorial")
sentiment("is")
sentiment("awesome")
sentiment(" not awesome")
text <- "This tutorial is not awesome"
sentiment(text)
text <- "This tutorial is awesome"
sentiment(text)
sentimentr::sentiment("This tutorial is awesome")
text_vector <- "This tutorial is awesome"
sentiword = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_sentiword, question.weight = 0)[["sentiment"]], 2)
round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_sentiword, question.weight = 0)[["sentiment"]], 2)
round(sentimentr::sentiment(text_vector)[["sentiment"]], 2)
round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_socal_google, question.weight = 0)[["sentiment"]], 2)
senti_matrix = function(text_vector){
mat = data.frame(
jockers_rinker = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_jockers_rinker,  question.weight = 0)[["sentiment"]], 2),
jockers = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_jockers, question.weight = 0)[["sentiment"]], 2),
huliu = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_huliu, question.weight = 0)[["sentiment"]], 2),
loughran_mcdonald = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_loughran_mcdonald, question.weight = 0)[["sentiment"]], 2),
senticnet = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_senticnet, question.weight = 0)[["sentiment"]], 2),
sentiword = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_sentiword, question.weight = 0)[["sentiment"]], 2),
sentimentr = round(sentimentr::sentiment(text_vector)[["sentiment"]], 2),
socal_google = round(sentimentr::sentiment(text_vector, lexicon::hash_sentiment_socal_google, question.weight = 0)[["sentiment"]], 2),
nrc = syuzhet::get_sentiment(text_vector, method="nrc"),
afinn = syuzhet::get_sentiment(text_vector, method="afinn"),
bing = syuzhet::get_sentiment(text_vector, method="bing"),
meanr = meanr::score(text_vector)[['score']]
)
return(mat)
}
senti_matrix(text_vector = "This cat is the best. But also the worst")
senti_matrix(text_vector = "This cat is not good. But also the worst")
devtools::document()
devtools::document()
?sentimentr::sentiment
devtools::document()
txt = c("cats l l l lllll", "dog", "si", " ", "")
nchar(txt)
sum(nchar(txt) < 5)
devtools::document()
devtools::document()
