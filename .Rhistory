reticulate::py_run_file(paste(directory,"hunt_all_rapid_pred.py", sep = ""))
} else if (type == "relevance"){
reticulate::py_run_file(paste(directory,"hunt_relevance_rapid_pred.py", sep = ""))
} else if (type == "stance"){
reticulate::py_run_file(paste(directory,"hunt_stance_rapid_h_pred.py", sep = ""))
} else {
stop("Please specify a valid type")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
} else {
stop("'text_vector' must be a vector")
}
}
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
hun_class = function(text_vector, type = "full"){
if(is.vector(text_vector)){
tmp_df = data.frame(text = text_vector)
data = reticulate::r_to_py(tmp_df)
model_directory = paste(find.package("classecol"),"/models/classecol-models-master/", sep = "")
save_dic = getwd()
if(type == "full"){
reticulate::py_run_file(paste(model_directory,"hunt_all_rapid_pred.py", sep = ""))
} else if (type == "relevance"){
reticulate::py_run_file(paste(model_directory,"hunt_relevance_rapid_pred.py", sep = ""))
} else if (type == "stance"){
reticulate::py_run_file(paste(model_directory,"hunt_stance_rapid_h_pred.py", sep = ""))
} else {
stop("Please specify a valid type")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
} else {
stop("'text_vector' must be a vector")
}
}
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
text_vector = classecol::clean(df$text, level = "simple")
type = "full"
(is.vector(text_vector))
tmp_df = data.frame(text = text_vector)
data = reticulate::r_to_py(tmp_df)
r.data
repl_python()
r.data
exit
foo = function(){
dat = r_to_py(tmp_df)
repl_python()
print(r.dat)
exit
}
foo()
exit
foo = function(){
dat = r_to_py(tmp_df)
py_run_string("r.dat")
}
foo()
dat = r_to_py(tmp_df)
py_run_string("r.dat")
tmp_df
dat = r_to_py(tmp_df)
py_run_string("print(r.dat)")
rm(dat)
foo = function(){
dat = r_to_py(tmp_df)
py_run_string("print(r.dat)")
}
foo()
dat = r_to_py(tmp_df)
py_run_string("print(r.dat)")
?py_run_string
dat = r_to_py(tmp_df)
py_run_string("print(r.dat)", local = TRUE, convert = convert)
py_run_string("print(r.dat)", local = TRUE, convert = T)
rm(dat)
foo = function(){
dat = r_to_py(tmp_df)
py_run_string("print(r.dat)", local = TRUE, convert = T)
}
foo()
foo()
dat = r_to_py(tmp_df)
py_run_string("print(r.dat)", local = TRUE, convert = T)
dat = r_to_py(tmp_df)
py_run_string("print(r.dat)", local = TRUE, convert = T)
foo = function(){
dat = r_to_py(tmp_df)
py_run_string("print(r.dat)", local = TRUE, convert = T)
}
rm(dat)
foo = function(  dat = r_to_py(tmp_df)){
py_run_string("print(r.dat)", local = TRUE, convert = T)
}
foo()
foo = function(dat = r_to_py(tmp_df)){
py_run_string("print(r.dat)", local = TRUE, convert = T)
}
foo()
foo = function(da){
dat = r_to_py(da)
return(dat)
}
foo(tmp_df)
py_run_string("print(r.dat)", local = TRUE, convert = T)
dat = r_to_py(da, convert = T)
foo = function(da){
dat = r_to_py(da, convert = T)
}
foo(tmp_df)
py_run_string("print(r.dat)", local = TRUE, convert = T)
foo = function(da){
dat = r_to_py(da, convert = T)
return(dat)
}
foo(tmp_df)
r_to_py
data = reticulate::r_to_py(tmp_df)
model_directory = paste(find.package("classecol"),"/models/classecol-models-master/", sep = "")
save_dic = getwd()
if(type == "full"){
reticulate::py_run_file(paste(model_directory,"hunt_all_rapid_pred.py", sep = ""))
} else if (type == "relevance"){
reticulate::py_run_file(paste(model_directory,"hunt_relevance_rapid_pred.py", sep = ""))
} else if (type == "stance"){
reticulate::py_run_file(paste(model_directory,"hunt_stance_rapid_h_pred.py", sep = ""))
} else {
stop("Please specify a valid type")
}
model_directory = reticulate::r_to_py(directory)
directory = paste(find.package("classecol"),"/models/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(directory)
reticulate::py_run_file(paste(directory,"hunt_all_rapid_pred.py", sep = ""))
py$pred_comb
rm(data, model_directory)
hun_class = function(text_vector, type = "full"){
if(is.vector(text_vector)){
tmp_df = data.frame(text = text_vector)
data = reticulate::r_to_py(tmp_df)
directory = paste(find.package("classecol"),"/models/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(directory)
save_dic = getwd()
if(type == "full"){
reticulate::py_run_file(paste(directory,"hunt_all_rapid_pred.py", sep = ""))
} else if (type == "relevance"){
reticulate::py_run_file(paste(directory,"hunt_relevance_rapid_pred.py", sep = ""))
} else if (type == "stance"){
reticulate::py_run_file(paste(directory,"hunt_stance_rapid_h_pred.py", sep = ""))
} else {
stop("Please specify a valid type")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
} else {
stop("'text_vector' must be a vector")
}
}
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
r_to_py(da, convert = T)
r_to_py(tmp_df, convert = T)
?r_to_py
tmp_df = data.frame(text = text_vector)
dat = r_to_py(tmp_df, convert = T)
py_run_string("print(r.dat)", local = TRUE, convert = T)
rm(dat)
foo = function(da){
dat = r_to_py(da, convert = T)
py_run_string("print(r.dat)", local = TRUE, convert = T)
return(dat)
}
dat = r_to_py(tmp_df, convert = T)
print(py_run_string("print(r.dat)", local = TRUE, convert = T))
rm(dat)
foo = function(da){
dat = r_to_py(da, convert = T)
print(py_run_string("print(r.dat)", local = TRUE, convert = T))
}
foo(tmp_df)
?py_run_string
foo = function(da){
dat = r_to_py(da, convert = T)
print(py_run_string("print(r.dat)", local = F))
}
foo(tmp_df)
foo = function(da){
dat = r_to_py(da, convert = T)
print(dat)
print(py_run_string("print(r.dat)", local = F))
}
foo(tmp_df)
dat = r_to_py(tmp_df, convert = T)
print(py_run_string("print(r.dat)", local = F))
rm(dat)
foo = function(da){
dat = r_to_py(da, convert = T)
print(py_run_string("print(r.dat)", local = F))
}
foo(tmp_df)
foo = function(da){
dat = r_to_py(da, convert = T)
print(py_run_string("print(r.dat)", local = F))
}
foo(da = tmp_df)
dat = r_to_py(da, convert = T)
dat = r_to_py(tmp_df, convert = T)
dat
class(dat)
rm(d)
rm(dat)
foo = function(da){
dat = r_to_py(da, convert = T)
class(dat)
print(py_run_string("print(r.dat)", local = F))
}
foo(da = tmp_df)
foo = function(da){
dat = r_to_py(da, convert = T)
class(dat)
#print(py_run_string("print(r.dat)", local = F))
}
foo(da = tmp_df)
foo = function(da){
dat = r_to_py(da, convert = T)
class(dat)
#print(py_run_string("print(r.dat)", local = F))
}
foo(da = tmp_df)
r.dat
py$r.dat
foo = function(da){
dat = r_to_py(da, convert = T)
class(dat)
#print(py_run_string("print(r.dat)", local = F))
}
foo(da = tmp_df)
foo = function(da){
dat = r_to_py(da, convert = T)
class(dat)
py_run_string("print(r.dat)", local = F)
}
foo(da = tmp_df)
?assign
newdata<- function(i, a, b) {
mydata_i<- data.frame(x=a, y=b)
return(mydata_i)
}
# not saved as object, just printed
newdata(1, 2, 3)
newdata(2, 4, 6)
# assign it
mydata_1 <- newdata(1, 2, 3)
mydata_2 <- newdata(2, 4, 6)
# and use it
last<- rbind(mydata_1, mydata_2)
df <- data.frame(x = rnorm(25),
g = rep(factor(LETTERS[1:5]), 5))
View(df)
LIST <- split(df, df$g)
View(LIST)
View(LIST)
View(LIST)
## Assign them to the global environment
list2env(LIST, envir = .GlobalEnv)
## Check that it worked
ls()
rm(A,B,C,D,E)
## Assign them to the global environment
foo = function() {
list2env(LIST, envir = .GlobalEnv)
}
foo()
rm(A,B,C,D,E)
a = rnorm(100)
rm(a)
dat = r_to_py(da, convert = T)
dat = r_to_py(tmp_df, convert = T)
list2env(list(dat), envir = .GlobalEnv)
list2env(list(data = dat), envir = .GlobalEnv)
rm(data, dat)
dat = r_to_py(tmp_df, convert = T)
list2env(list(data = dat), envir = .GlobalEnv)
py_run_string("print(r.data)", local = F)
rm(dat, data)
foo = function(da){
dat = r_to_py(da, convert = T)
list2env(list(data = dat), envir = .GlobalEnv)
py_run_string("print(r.data)", local = F)
}
foo(da = tmp_df)
foo = function(da){
dat = r_to_py(da, convert = F)
list2env(list(data = dat), envir = .GlobalEnv)
py_run_string("print(r.data)", local = F)
}
foo(da = tmp_df)
tmp_df = data.frame(text = text_vector)
dat = reticulate::r_to_py(tmp_df)
list2env(list(data = dat), envir = .GlobalEnv)
directory = paste(find.package("classecol"),"/models/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(directory)
assign("model_directory", model_directory, envir = .GlobalEnv)
rm(model_directory, dat, data)
hun_class = function(text_vector, type = "full"){
if(is.vector(text_vector)){
tmp_df = data.frame(text = text_vector)
dat = reticulate::r_to_py(tmp_df)
list2env(list(data = dat), envir = .GlobalEnv)
directory = paste(find.package("classecol"),"/models/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(directory)
assign("model_directory", model_directory, envir = .GlobalEnv)
save_dic = getwd()
if(type == "full"){
reticulate::py_run_file(paste(directory,"hunt_all_rapid_pred.py", sep = ""))
} else if (type == "relevance"){
reticulate::py_run_file(paste(directory,"hunt_relevance_rapid_pred.py", sep = ""))
} else if (type == "stance"){
reticulate::py_run_file(paste(directory,"hunt_stance_rapid_h_pred.py", sep = ""))
} else {
stop("Please specify a valid type")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
} else {
stop("'text_vector' must be a vector")
}
}
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I love walking in nature - so serene",
"Why are the government not stopping the destruction of the rainforest?!",
"Tiger wins the PGA tour again!"),
stringsAsFactors = F)
df$text = classecol::clean(df$text, level = "full")
sm = as.matrix(cbind(
valence(df$text),
lang_eng(df$text),
senti_matrix(df$text)))
nat_class(
text_vector = df$text,
senti = sm,
type = "trimmed")
ncol(sm)
nat_class = function(text_vector,
senti,
type = "full"){
if(ncol(senti) != 16 ){
stop("senti, the sentiment matrix must be a matrix with 16 columns and an equal number of observations to the text_vector") } else {
senti_tmp = reticulate::r_to_py(senti)
list2env(list(sent_mat = reticulate::r_to_py(senti_tmp)), envir = .GlobalEnv)
}
if(is.vector(text_vector)){
tmp_df = data.frame(text = text_vector)
dat = reticulate::r_to_py(tmp_df)
list2env(list(data = dat), envir = .GlobalEnv)
directory = paste(find.package("classecol"),"/models/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(directory)
assign("model_directory", model_directory, envir = .GlobalEnv)
save_dic = getwd()
if(type == "trimmed"){
reticulate::py_run_file(paste(directory,"nat_all(not_against)_rapid_pred.py", sep = ""))
} else if (type == "full"){
reticulate::py_run_file(paste(directory,"nat_all_rapid_pred.py", sep = ""))
} else if (type == "relevance"){
reticulate::py_run_file(paste(directory,"nat_relevance_rapid_pred.py", sep = ""))
} else if (type == "stance"){
reticulate::py_run_file(paste(directory,"nat_stance_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type")
}
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
bio_class = function(text_vector,
type = "full"){
if(is.vector(text_vector)){
tmp_df = data.frame(text = text_vector)
dat = reticulate::r_to_py(tmp_df)
list2env(list(data = dat), envir = .GlobalEnv)
directory = paste(find.package("classecol"),"/models/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(directory)
assign("model_directory", model_directory, envir = .GlobalEnv)
save_dic = getwd()
if(type == "full"){
reticulate::py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "person"){
reticulate::py_run_file(paste(directory,"bio_per_org_rapid_pred.py", sep = ""))
} else if (type == "expert"){
reticulate::py_run_file(paste(directory,"bio_per_exp_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
} else {
stop("'text_vector' must be a vector")
}
}
df = data.frame(
text = c(
"I love walking in nature - so serene",
"Why are the government not stopping the destruction of the rainforest?!",
"Tiger wins the PGA tour again!"),
stringsAsFactors = F)
df$text = classecol::clean(df$text, level = "full")
sm = as.matrix(cbind(
valence(df$text),
lang_eng(df$text),
senti_matrix(df$text)))
nat_class(
text_vector = df$text,
senti = sm,
type = "trimmed")
df = data.frame(
name = c(
"Jane Doe ",
"Thomas Frederick Johnson",
"Fictional University"),
description = c(
"Business leader, banker, parent, and cyclist",
"Ecology and conservation researcher",
"Campus life and study at the Fictional University. Follow for news and updates"),
stringsAsFactors = F)
bio_class(
text_vector = paste(df$name, df$description),
type = "full")
df = data.frame(
name = c(
"Jane Doe ",
"Thomas Frederick Johnson",
"Fictional University"),
description = c(
"Business leader, banker, parent, and cyclist",
"Ecology and conservation researcher",
"Campus life and study at the Fictional University. Follow for news and updates"),
stringsAsFactors = F)
bio_class(
text_vector = paste(df$name, df$description),
type = "full")
library(devtools)
install.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
library(devtools)
install_github("GitTFJ/addeR")
install_github("GitTFJ/classecol")
library(addeR)
library(classecol)
load_classecol(download_models = F, download_modules = F, link_py = T)
load_classecol(download_models = F, download_modules = F, link_py = T)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
hun_class(
text_vector = classecol::clean(df$text, level = "simple"),
type = "full")
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
devtools::document()
devtools::document()
