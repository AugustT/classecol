directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
repl_python()
r.data
exit
bio_class = function(text_vector,
type = "full",
directory){
save_dic = getwd()
data = data.frame(text = text_vector)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data)
model_directory = r_to_py(directory)
repl_python()
print(r.model_directory)
exit
}
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
#dir.create("Models")
#download_models("Models")
bio_class(
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"),
type = "full",
directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
exit
bio_class = function(text_vector,
type = "full",
directory){
save_dic = getwd()
data = data.frame(text = text_vector)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data)
model_directory = r_to_py(directory)
}
bio_class = function(text_vector,
type = "full",
directory){
save_dic = getwd()
data = data.frame(text = text_vector)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data)
model_directory = r_to_py(directory)
return(py$r.model_directory)
}
#dir.create("Models")
#download_models("Models")
bio_class(
text_vector = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"),
type = "full",
directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
use_python("C:/Users/mn826766/Anaconda3/python.exe")
use_python("C:/Users/mn826766/Anaconda3/python.exe")
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
model_directory = r_to_py(paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
repl_python()
r.model_directory
exit
model_directory = r_to_py(paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
repl_python()
r.model_directory
exit
use_python("C:/Users/mn826766/Anaconda3/python.exe")
bio_class = function(text_vector,
type = "full",
model_directory,
directory,
){
save_dic = getwd()
if(is.character(text_vector)){
print(8)
if(type == "full"){
print(9)
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
print(10)
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
} else {
stop("Data format should be a vector in character format")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
bio_class = function(data,
type = "full",
model_directory,
directory,
){
save_dic = getwd()
if(is.character(text_vector)){
if(type == "full"){
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
} else {
stop("Data format should be a vector in character format")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
bio_class = function(data,
type = "full",
model_directory,
directory){
save_dic = getwd()
if(type == "full"){
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
bio_class(
data = r_to_py(data.frame(text = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"))),
type = "full",
model_directory = r_to_py(paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = "")),
directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
bio_class = function(type = "full",
directory){
save_dic = getwd()
if(type == "full"){
py_run_file(paste(directory,"bio_all_rapid_pred.py", sep = ""))
} else if (type == "simple"){
py_run_file(paste(directory,"bio_wldexjoin_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: simple or full")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets")
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(data.frame(text = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading")))
model_directory = r_to_py(paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = "")
bio_class(
type = "full",
directory = paste(getwd(),"/", "Manuscript/Models/classecol-models-master/", sep = ""))
?dir
library(devtools)
install_github("GitTFJ/classecol")
library(classecol)
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets/Manuscript")
df = data.frame(text = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"))
direc = paste(getwd(),"/", "models/classecol-models-master/", sep = "")
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(df)
model_directory = r_to_py(direc)
library(reticulate)
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(df)
model_directory = r_to_py(direc)
bio_class(
type = "full",
directory = direc)
library(classecol)
?bio_class
?clean
?lang_matrix
?classecol
detach("package:classecol", unload=TRUE)
library("classecol", lib.loc="~/R/win-library/3.5")
library(devtools)
library(classecol)
library(devtools)
install_github("GitTFJ/classecol")
library(classecol)
library(classecol)
?clean
remove.packages("classecol")
install_github("GitTFJ/classecol")
library("classecol", lib.loc="~/R/win-library/3.5")
?clean
library(roxygen2)
getwd()
document()
install_github("GitTFJ/classecol")
library(classecol)
?bio_class
library(classecol)
library(reticulate)
setwd("C:/Users/mn826766/OneDrive - University of Reading/PhDResearch/UnderstandingDeclinesInLargeCarnivores/Chapters/Twitter/ClassifyTweets/Manuscript")
df = data.frame(text = c("Prime Minister of the United Kingdom and @Conservatives
leader. Member of Parliament for Uxbridge and South Ruislip. #StayAlert", "Quantitative ecologist interested in conservation & population dynamics. Lecturer at University of Reading, UK. She/her", "University of Reading"))
direc = paste(getwd(),"/", "models/classecol-models-master/", sep = "")
use_python("C:/Users/mn826766/Anaconda3/python.exe")
data = r_to_py(df)
model_directory = r_to_py(direc)
bio_class(
type = "full",
directory = direc)
library(roxygen2)
document()
devtools::document()
getwd()
setwd("../classecol")
devtools::document()
env_class = function(type = "trim",
directory){
save_dic = getwd()
if(type == "trim"){
py_run_file(paste(directory,"wild_all(not_against)_rapid_pred.py", sep = ""))
} else if (type == "all"){
py_run_file(paste(directory,"wild_all_rapid_pred.py", sep = ""))
} else if (type == "relevant"){
py_run_file(paste(directory,"wild_relevance_rapid_pred.py", sep = ""))
} else if (type == "stance"){
py_run_file(paste(directory,"wild_stance_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: trim, all, relevant, or stance")
} or
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
env_class = function(type = "trim",
directory){
save_dic = getwd()
if(type == "trim"){
py_run_file(paste(directory,"wild_all(not_against)_rapid_pred.py", sep = ""))
} else if (type == "all"){
py_run_file(paste(directory,"wild_all_rapid_pred.py", sep = ""))
} else if (type == "relevant"){
py_run_file(paste(directory,"wild_relevance_rapid_pred.py", sep = ""))
} else if (type == "stance"){
py_run_file(paste(directory,"wild_stance_rapid_pred.py", sep = ""))
} else {
stop("Please specify a valid type: trim, all, relevant, or stance")
}
setwd(save_dic)
return_vector = py$pred_comb
return(return_vector)
}
devtools::document()
devtools::document()
library(roxygen2)
library(devtools)
devtools::document()
library(roxygen2)
library(devtools)
?classecol::bio_class
devtools::document()
library(devtools)
install_github("GitTFJ/classecol")
library(classecol)
library(reticulate)
direc = paste(find.package("classecol"),"/models", sep = "")
direc
dir.create(direc)
download_models(direc)
direc
reticulate::use_python("C:/Users/mn826766/AppData/Local/Continuum/anaconda3/python.exe")
direc = paste(direc, "/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(direc)
df = data.frame(
name = c(
"Boris Johnson #StayAlert",
"Manuela Gonzalez",
"University of Reading"),
description = c(
"Prime Minister of the United Kingdom and @Conservatives leader.
Member of Parliament for Uxbridge and South Ruislip. #StayAlert",
"Quantitative ecologist interested in conservation & population dynamics.
Lecturer at University of Reading, UK. She/her",
"Campus life and study at the University of Reading, UK. For news and comment follow @UniRdg_News"))
df$text = paste(df$name, df$description)
data = reticulate::r_to_py(df)
bio_class(
type = "split",
directory = direc)
df = data.frame(
text = c(
"I hate hunting",
"Cant wait to go hunting",
"Hunting for my car keys"))
df$text = classecol::clean(df$text, level = "simple")
data = reticulate::r_to_py(df)
hunt_class(
type = "all",
directory = direc)
df = data.frame(
text = c(
"I love walking in nature",
"I am so sad we losing the rainforest. stop the destruction",
"Tiger wins the PGA tour again!"))
df$text = classecol::clean(df$text, level = "full")
sm = as.matrix(cbind(
valence(df$text),
lang_eng(as.character(df$text)),
senti_matrix(as.character(contract(df$text)))))
data = reticulate::r_to_py(df)
sent_mat = reticulate::r_to_py(sm)
env_class(
type = "trim",
directory = direc)
out = env_class(
type = "trim",
directory = direc)
ptint(out)
print(out)
head(cbind(df$text, out))
head(cbind(df$text, as.vector(out)))
head(data.frame(text = (df$text, classification = as.vector(out)))
head(data.frame(text = df$text, classification = as.vector(out)))
path <- find.package("classecol")
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(devtools)
getwd()
build_manual(path=getwd())
library(tools)
?texi2dvi
build_manual(pkg = "classecol")
build_manual(pkg = ".")
?bio_class
library(classecol)
?bio_class
remove.packages("classecol")
remove.packages("classecol")
library(devtools)
install_github("GitTFJ/classecol", upgrade = "never")
library(classecol)
library("classecol", lib.loc="~/R/win-library/3.5")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
df = data.frame(
text = c(
"I love walking in nature - so serene",
"Why are the government not stopping the destruction of the rainforest?!",
"How can I stop this pesky fox destroying my garden? #pest"
"Tiger wins the PGA tour again!"))
df = data.frame(
text = c(
"I love walking in nature - so serene",
"Why are the government not stopping the destruction of the rainforest?!",
"How can I stop this pesky fox destroying my garden? #pest",
"Tiger wins the PGA tour again!"))
df$text = classecol::clean(df$text, level = "full")
install_github("GitTFJ/classecol", upgrade = "never")
library(devtools)
install_github("GitTFJ/classecol", upgrade = "never")
library(classecol)
library(reticulate)
direc = paste(find.package("classecol"),"/models", sep = "")
download_models(direc)
?lexicon
library(lexicon)
?lexicon
reticulate::use_python("C:/Users/mn826766/AppData/Local/Continuum/anaconda3/python.exe")
py_config()
reticulate::py_config()
library(devtools)
install_github("GitTFJ/classecol", upgrade = "never")
library(classecol)
library(reticulate)
direc = paste(find.package("classecol"),"/models", sep = "")
direc = paste(direc, "/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(direc)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
df$text = classecol::clean(df$text, level = "simple")
data = reticulate::r_to_py(df)
hun_class(
type = "Full",
directory = direc)
library(devtools)
install_github("GitTFJ/classecol", upgrade = "never")
library(classecol)
library(reticulate)
direc = paste(find.package("classecol"),"/models", sep = "")
download_models(direc)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
df$text = classecol::clean(df$text, level = "simple")
data = reticulate::r_to_py(df)
hun_class(
type = "Full",
directory = direc)
#reticulate::use_python("C:User/Python/Python36/python.exe") #Specify your own path!!!
direc = paste(direc, "/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(direc)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
df$text = classecol::clean(df$text, level = "simple")
data = reticulate::r_to_py(df)
hun_class(
type = "Full",
directory = direc)
df = data.frame(
text = c(
"I love walking in nature - so serene",
"Why are the government not stopping the destruction of the rainforest?!",
"Tiger wins the PGA tour again!"),
stringsAsFactors = F)
df$text = classecol::clean(df$text, level = "full")
sm = as.matrix(cbind(
valence(df$text),
lang_eng(df$text),
senti_matrix(df$text)))
data = reticulate::r_to_py(df)
sent_mat = reticulate::r_to_py(sm)
nat_class(
type = "Trimmed",
directory = direc)
df = data.frame(
name = c(
"Jane Doe ",
"Thomas Frederick Johnson",
"Fictional University"),
description = c(
"Business leader, banker, parent, and cyclist",
"Ecology and conservation researcher",
"Campus life and study at the Fictional University. Follow for news and updates"),
stringsAsFactors = F)
df$text = paste(df$name, df$description)
data = reticulate::r_to_py(df)
bio_class(
type = "Full",
directory = direc)
library(devtools)
install_github("GitTFJ/classecol", upgrade = "never")
library(classecol)
library(reticulate)
reticulate::use_python("C:/Users/mn826766/AppData/Local/Continuum/anaconda3/python.exe")
library(devtools)
install_github("GitTFJ/classecol", upgrade = "never")
library(classecol)
direc = paste(find.package("classecol"),"/models", sep = "")
download_models(direc)
#reticulate::use_python("C:User/Python/Python36/python.exe") #Specify your own path!!!
direc = paste(direc, "/classecol-models-master/", sep = "")
model_directory = reticulate::r_to_py(direc)
df = data.frame(
text = c(
"I hate hunting. Ban it now!",
"Cant wait to go camping this weekend #hunting #fishing",
"Hunting for my car keys"),
stringsAsFactors = F)
df$text = classecol::clean(df$text, level = "simple")
data = reticulate::r_to_py(df)
hun_class(
type = "Full",
directory = direc)
df = data.frame(
text = c(
"I love walking in nature - so serene",
"Why are the government not stopping the destruction of the rainforest?!",
"Tiger wins the PGA tour again!"),
stringsAsFactors = F)
df$text = classecol::clean(df$text, level = "full")
sm = as.matrix(cbind(
valence(df$text),
lang_eng(df$text),
senti_matrix(df$text)))
data = reticulate::r_to_py(df)
sent_mat = reticulate::r_to_py(sm)
nat_class(
type = "Trimmed",
directory = direc)
df = data.frame(
name = c(
"Jane Doe ",
"Thomas Frederick Johnson",
"Fictional University"),
description = c(
"Business leader, banker, parent, and cyclist",
"Ecology and conservation researcher",
"Campus life and study at the Fictional University. Follow for news and updates"),
stringsAsFactors = F)
df$text = paste(df$name, df$description)
data = reticulate::r_to_py(df)
bio_class(
type = "Full",
directory = direc)
devtools::document()
devtools::build_manual()
install_github("GitTFJ/classecol", upgrade = "never")
devtools::build_manual("classecol")
devtools::build_manual("classecol")
devtools::build_manual(pkg  = "classecol")
